# def quadratic_equations(a: int | float, b: int | float, c: int |float) -> tuple[float, float] | float | None:
#     d = b ** 2 - 4 * a * c
#     if d > 0:
#         return (-b + d ** 0.5) / (2 * a), (-b - d ** 0.5) / (2 * a)
#     elif d == 0:
#         return -b / (2 * a)
#     else:
#         return None

# print(quadratic_equations(2, -3, -9))


def mutable(data: list[int]) -> list[int]:
    for i, item in enumerate(data):
        data[i] = item + 1
    return data

my_list = [2, 4, 6, 8]
print(f'In main {my_list = }')
new_list = mutable(my_list)
print(f'{my_list = }\t{new_list = }')
print()



# def from_one_to_n(n, data=[]):
#     for i in range(1, n + 1):
#         data.append(i)
#     return data

def from_one_to_n(n, data=None):
    if data is None:
        data = []
    for i in range(1, n + 1):
        data.append(i)
    return data


new_list = from_one_to_n(5)
print(f'{new_list = }')
other_list = from_one_to_n(7)
print(f'{other_list = }')

#  —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±–æ–µ —á–∏—Å–ª–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤

def mean(*args):
    return sum(args) / len(args)
print(mean(*[1, 2, 3]))
print(mean(1, 2, 3))

# –ü–∞—Ä–∞–º–µ—Ç—Ä **kwargs —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

def school_print(**kwargs):
    for key, value in kwargs.items():
        print(f'–ü–æ –ø—Ä–µ–¥–º–µ—Ç—É "{key}" –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞ {value}')
    
print(school_print(—Ö–∏–º–∏—è=5, —Ñ–∏–∑–∏–∫–∞=4, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞=5, —Ñ–∏–∑—Ä–∞=5))


# –û–¥–∏–Ω –∏–∑ —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–ª–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
# —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º ‚Äî –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º.

LIMIT = 1_000
def func(x, y):
    result = x ** y % LIMIT
    return result
print(func(42, 73))


# –ê–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –æ–Ω–∏ –∂–µ –ª—è–º–±–¥–∞ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–π —Å–∞—Ö–∞—Ä –¥–ª—è –æ–±—ã—á–Ω—ã—Ö
# –ø–∏—Ç–æ–Ω–æ–≤—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å —Ä—è–¥–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. –û–Ω–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –∑–∞–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ–¥–Ω—É
# —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.

def add_two_def(a, b):
    return a + b

add_two_lambda = lambda a, b: a + b

print(add_two_def(42, 3.14))
print(add_two_lambda(42, 3.14))

# –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ª—è–º–±–¥–∞

my_dict = {'two': 2, 'one': 1, 'four': 4, 'three': 3, 'ten': 10}
s_key = sorted(my_dict.items())
s_value = sorted(my_dict.items(), key=lambda x: x[1])
print(f'{s_key = }\n{s_value = }')

# –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

def max_before_hundred(*args):
    """Return the maximum number not exceeding 100.

    :param args: tuple of int or float numbers
    :return: int or float number from the tuple args
    """
    m = float('-inf')
    for item in args:
        if m < item < 100:
            m = item
    return m

print(max_before_hundred(-42, 73, 74, 256, 0))
help(max_before_hundred)

# –§—É–Ω–∫—Ü–∏–∏ –∏–∑ –∫–æ—Ä–æ–±–∫–∏

texts = ["–ü—Ä–∏–≤–µ—Ç", "–ó–î–û–†–û–í–ê", "–ø—Ä–∏–≤–µ–¢—Å—Ç–≤—É—é"]
res = map(lambda x: x.lower(), texts)
print(*res)
print()

numbers = [42, -73, 1024]
res = tuple(filter(lambda x: x > 0, numbers))
print(res)
print()

names = ["–ò–≤–∞–Ω", "–ù–∏–∫–æ–ª–∞–π", "–ü—ë—Ç—Ä"]
salaries = [125_000, 96_000, 109_000]
awards = [0.1, 0.25, 0.13, 0.99]
for name, salary, award in zip(names, salaries, awards):
    print(f'{name} –∑–∞—Ä–∞–±–æ—Ç–∞–ª {salary:.2f} –¥–µ–Ω–µ–≥ –∏ –ø—Ä–µ–º–∏—é {salary* award:.2f}')

print()

lst_1 = []
lst_2 = [42, 256, 73]
lst_3 = [("–ò–≤–∞–Ω", 125_000), ("–ù–∏–∫–æ–ª–∞–π", 96_000), ("–ü—ë—Ç—Ä",109_000)]
print(max(lst_1, default='empty'))
print(max(*lst_2))
print(max(lst_3, key=lambda x: x[1]))
print()

my_list = [42, 256, 73]
print(sum(my_list))
print(sum(my_list, start=1024))
print()

numbers = [42, -73, 1024]
if all(map(lambda x: x > 0, numbers)):
    print('–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ')
else:
    print('–í –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏/–∏–ª–∏ –Ω—É–ª–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã')

print()

# –§—É–Ω–∫—Ü–∏–∏ chr(), ord()

print(chr(97))
print(chr(1105))
print(chr(128519))
print()

print(ord('a'))
print(ord('–∞'))
print(ord('üòâ'))
print()

# –§—É–Ω–∫—Ü–∏–∏ locals(), globals(), vars()

SIZE = 10

# def func(a, b, c):
#     x = a + b
#     print(locals())
#     z = x + c
#     return z

# func(1, 2, 3)
# print()

data = [25, -42, 146, 73, -100, 12]
print(list(map(str, data)))
print(max(data, key=lambda x: -x))

# print(*filter(lambda x: not x[0].startswith('__'),
# globals().items()))
